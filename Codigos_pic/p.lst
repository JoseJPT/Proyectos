CCS PCM C Compiler, Version 5.015, 5967               05-dic.-24 09:38

               Filename:   C:\Users\Joss\Desktop\Meca\Programacion\Codigos pic\p.lst

               ROM used:   226 words (3%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           8 (2%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   06C
0003:  NOP
.................... #include <16f877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses xt, NOWDT 
.................... #use delay(clock=20M) 
*
0015:  MOVLW  22
0016:  MOVWF  04
0017:  BCF    03.7
0018:  MOVF   00,W
0019:  BTFSC  03.2
001A:  GOTO   028
001B:  MOVLW  06
001C:  MOVWF  78
001D:  CLRF   77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  DECFSZ 78,F
0021:  GOTO   01D
0022:  MOVLW  7B
0023:  MOVWF  77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  DECFSZ 00,F
0027:  GOTO   01B
0028:  RETURN
....................  
....................  
.................... void ADELANTE(); 
.................... void IZQUIERDA(); 
.................... void DERECHA(); 
.................... void STOP(); 
....................  
.................... int main()  
*
006C:  MOVF   03,W
006D:  ANDLW  1F
006E:  MOVWF  03
006F:  BSF    03.5
0070:  BSF    1F.0
0071:  BSF    1F.1
0072:  BSF    1F.2
0073:  BCF    1F.3
0074:  MOVLW  07
0075:  MOVWF  1C
0076:  BCF    03.7
.................... { 
....................     do { 
....................         if (input(PIN_B0) == 1 && input(PIN_B1) == 1 && input(PIN_B2) == 1) { 
0077:  BSF    06.0
0078:  BCF    03.5
0079:  BTFSS  06.0
007A:  GOTO   087
007B:  BSF    03.5
007C:  BSF    06.1
007D:  BCF    03.5
007E:  BTFSS  06.1
007F:  GOTO   087
0080:  BSF    03.5
0081:  BSF    06.2
0082:  BCF    03.5
0083:  BTFSS  06.2
0084:  GOTO   087
....................             STOP(); 
0085:  CALL   004
....................         }   
0086:  GOTO   0DD
....................          
....................         else if (input(PIN_B0) == 1 && input(PIN_B1) == 1 && input(PIN_B2) == 0) { 
0087:  BSF    03.5
0088:  BSF    06.0
0089:  BCF    03.5
008A:  BTFSS  06.0
008B:  GOTO   098
008C:  BSF    03.5
008D:  BSF    06.1
008E:  BCF    03.5
008F:  BTFSS  06.1
0090:  GOTO   098
0091:  BSF    03.5
0092:  BSF    06.2
0093:  BCF    03.5
0094:  BTFSC  06.2
0095:  GOTO   098
....................             IZQUIERDA(); 
0096:  CALL   029
....................         } 
0097:  GOTO   0DD
....................          
....................         else if (input(PIN_B0) == 0 && input(PIN_B1) == 1 && input(PIN_B2) == 0) { 
0098:  BSF    03.5
0099:  BSF    06.0
009A:  BCF    03.5
009B:  BTFSC  06.0
009C:  GOTO   0A9
009D:  BSF    03.5
009E:  BSF    06.1
009F:  BCF    03.5
00A0:  BTFSS  06.1
00A1:  GOTO   0A9
00A2:  BSF    03.5
00A3:  BSF    06.2
00A4:  BCF    03.5
00A5:  BTFSC  06.2
00A6:  GOTO   0A9
....................             IZQUIERDA(); 
00A7:  CALL   029
....................         }  
00A8:  GOTO   0DD
....................          
....................         else if (input(PIN_B0) == 1 && input(PIN_B1) == 0 && input(PIN_B2) == 1) { 
00A9:  BSF    03.5
00AA:  BSF    06.0
00AB:  BCF    03.5
00AC:  BTFSS  06.0
00AD:  GOTO   0BA
00AE:  BSF    03.5
00AF:  BSF    06.1
00B0:  BCF    03.5
00B1:  BTFSC  06.1
00B2:  GOTO   0BA
00B3:  BSF    03.5
00B4:  BSF    06.2
00B5:  BCF    03.5
00B6:  BTFSS  06.2
00B7:  GOTO   0BA
....................             DERECHA(); 
00B8:  CALL   041
....................         }  
00B9:  GOTO   0DD
....................          
....................         else if (input(PIN_B0) == 0 && input(PIN_B1) == 0 && input(PIN_B2) == 1) { 
00BA:  BSF    03.5
00BB:  BSF    06.0
00BC:  BCF    03.5
00BD:  BTFSC  06.0
00BE:  GOTO   0CB
00BF:  BSF    03.5
00C0:  BSF    06.1
00C1:  BCF    03.5
00C2:  BTFSC  06.1
00C3:  GOTO   0CB
00C4:  BSF    03.5
00C5:  BSF    06.2
00C6:  BCF    03.5
00C7:  BTFSS  06.2
00C8:  GOTO   0CB
....................             DERECHA(); 
00C9:  CALL   041
....................         }  
00CA:  GOTO   0DD
....................          
....................         else if (input(PIN_B0) == 1 && input(PIN_B1) == 0 && input(PIN_B2) == 0) { 
00CB:  BSF    03.5
00CC:  BSF    06.0
00CD:  BCF    03.5
00CE:  BTFSS  06.0
00CF:  GOTO   0DC
00D0:  BSF    03.5
00D1:  BSF    06.1
00D2:  BCF    03.5
00D3:  BTFSC  06.1
00D4:  GOTO   0DC
00D5:  BSF    03.5
00D6:  BSF    06.2
00D7:  BCF    03.5
00D8:  BTFSC  06.2
00D9:  GOTO   0DC
....................             ADELANTE(); 
00DA:  GOTO   059
....................         }  
00DB:  GOTO   0DD
....................          
....................         else { 
....................             STOP(); 
00DC:  CALL   004
....................         } 
....................     } while (1);  
00DD:  BSF    03.5
00DE:  GOTO   077
....................  
....................     return 0; 
00DF:  MOVLW  00
00E0:  MOVWF  78
.................... } 
....................  
00E1:  SLEEP
....................  
.................... void ADELANTE() { 
....................     output_high(PIN_A0); 
*
0059:  BSF    03.5
005A:  BCF    05.0
005B:  BCF    03.5
005C:  BSF    05.0
....................     output_high(PIN_A2); 
005D:  BSF    03.5
005E:  BCF    05.2
005F:  BCF    03.5
0060:  BSF    05.2
....................     output_low(PIN_A1); 
0061:  BSF    03.5
0062:  BCF    05.1
0063:  BCF    03.5
0064:  BCF    05.1
....................     output_low(PIN_A3); 
0065:  BSF    03.5
0066:  BCF    05.3
0067:  BCF    03.5
0068:  BCF    05.3
0069:  BCF    0A.3
006A:  BCF    0A.4
006B:  GOTO   0DB (RETURN)
.................... } 
....................  
....................  
.................... void DERECHA() { 
....................     output_low(PIN_A0); 
*
0041:  BSF    03.5
0042:  BCF    05.0
0043:  BCF    03.5
0044:  BCF    05.0
....................     output_high(PIN_A2); 
0045:  BSF    03.5
0046:  BCF    05.2
0047:  BCF    03.5
0048:  BSF    05.2
....................     output_high(PIN_A1); 
0049:  BSF    03.5
004A:  BCF    05.1
004B:  BCF    03.5
004C:  BSF    05.1
....................     output_low(PIN_A3); 
004D:  BSF    03.5
004E:  BCF    05.3
004F:  BCF    03.5
0050:  BCF    05.3
....................     delay_ms(700);  
0051:  MOVLW  04
0052:  MOVWF  21
0053:  MOVLW  AF
0054:  MOVWF  22
0055:  CALL   015
0056:  DECFSZ 21,F
0057:  GOTO   053
0058:  RETURN
.................... } 
....................  
....................  
.................... void IZQUIERDA() { 
....................     output_high(PIN_A0); 
*
0029:  BSF    03.5
002A:  BCF    05.0
002B:  BCF    03.5
002C:  BSF    05.0
....................     output_low(PIN_A2); 
002D:  BSF    03.5
002E:  BCF    05.2
002F:  BCF    03.5
0030:  BCF    05.2
....................     output_low(PIN_A1); 
0031:  BSF    03.5
0032:  BCF    05.1
0033:  BCF    03.5
0034:  BCF    05.1
....................     output_high(PIN_A3); 
0035:  BSF    03.5
0036:  BCF    05.3
0037:  BCF    03.5
0038:  BSF    05.3
....................     delay_ms(700);  
0039:  MOVLW  04
003A:  MOVWF  21
003B:  MOVLW  AF
003C:  MOVWF  22
003D:  CALL   015
003E:  DECFSZ 21,F
003F:  GOTO   03B
0040:  RETURN
.................... } 
....................  
....................  
.................... void STOP() { 
....................     output_low(PIN_A0); 
*
0004:  BSF    03.5
0005:  BCF    05.0
0006:  BCF    03.5
0007:  BCF    05.0
....................     output_low(PIN_A2); 
0008:  BSF    03.5
0009:  BCF    05.2
000A:  BCF    03.5
000B:  BCF    05.2
....................     output_low(PIN_A1); 
000C:  BSF    03.5
000D:  BCF    05.1
000E:  BCF    03.5
000F:  BCF    05.1
....................     output_low(PIN_A3); 
0010:  BSF    03.5
0011:  BCF    05.3
0012:  BCF    03.5
0013:  BCF    05.3
0014:  RETURN
.................... } 

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
