CCS PCM C Compiler, Version 5.015, 5967               14-sep.-24 22:55

               Filename:   C:\Users\Joss\Desktop\Meca\Programacion\Codigos pic\codigox.lst

               ROM used:   214 words (3%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           6 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   025
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT 
.................... #USE DELAY(CLOCK=4M)  
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
....................  
.................... #define IN1 PIN_A0 
.................... #define IN2 PIN_A1 
.................... #define IN3 PIN_A2 
.................... #define IN4 PIN_A3 
....................  
.................... #define IN5 PIN_B0 
.................... #define IN6 PIN_B1 
.................... #define IN7 PIN_B2 
.................... #define IN8 PIN_B3 
....................  
.................... void stop_motors() { 
....................    output_low(IN1); 
0004:  BSF    03.5
0005:  BCF    05.0
0006:  BCF    03.5
0007:  BCF    05.0
....................    output_low(IN2); 
0008:  BSF    03.5
0009:  BCF    05.1
000A:  BCF    03.5
000B:  BCF    05.1
....................    output_low(IN3); 
000C:  BSF    03.5
000D:  BCF    05.2
000E:  BCF    03.5
000F:  BCF    05.2
....................    output_low(IN4); 
0010:  BSF    03.5
0011:  BCF    05.3
0012:  BCF    03.5
0013:  BCF    05.3
....................    output_low(IN5); 
0014:  BSF    03.5
0015:  BCF    06.0
0016:  BCF    03.5
0017:  BCF    06.0
....................    output_low(IN6); 
0018:  BSF    03.5
0019:  BCF    06.1
001A:  BCF    03.5
001B:  BCF    06.1
....................    output_low(IN7); 
001C:  BSF    03.5
001D:  BCF    06.2
001E:  BCF    03.5
001F:  BCF    06.2
....................    output_low(IN8); 
0020:  BSF    03.5
0021:  BCF    06.3
0022:  BCF    03.5
0023:  BCF    06.3
0024:  RETURN
.................... } 
....................  
.................... void main() { 
0025:  MOVF   03,W
0026:  ANDLW  1F
0027:  MOVWF  03
0028:  MOVLW  19
0029:  BSF    03.5
002A:  MOVWF  19
002B:  MOVLW  A6
002C:  MOVWF  18
002D:  MOVLW  90
002E:  BCF    03.5
002F:  MOVWF  18
0030:  BSF    03.5
0031:  BSF    1F.0
0032:  BSF    1F.1
0033:  BSF    1F.2
0034:  BCF    1F.3
0035:  MOVLW  07
0036:  MOVWF  1C
0037:  BCF    03.7
....................    char data; 
....................     
....................    while(TRUE) { 
....................       if(kbhit()) { 
0038:  BCF    03.5
0039:  BTFSS  0C.5
003A:  GOTO   0D3
....................          data = getc(); 
003B:  BTFSS  0C.5
003C:  GOTO   03B
003D:  MOVF   1A,W
003E:  MOVWF  21
....................           
....................          switch(data) { 
003F:  MOVF   21,W
0040:  XORLW  77
0041:  BTFSC  03.2
0042:  GOTO   04D
0043:  XORLW  04
0044:  BTFSC  03.2
0045:  GOTO   06E
0046:  XORLW  12
0047:  BTFSC  03.2
0048:  GOTO   08F
0049:  XORLW  05
004A:  BTFSC  03.2
004B:  GOTO   0B0
004C:  GOTO   0D1
....................             case 'w': 
....................                output_high(IN1); 
004D:  BSF    03.5
004E:  BCF    05.0
004F:  BCF    03.5
0050:  BSF    05.0
....................                output_high(IN4); 
0051:  BSF    03.5
0052:  BCF    05.3
0053:  BCF    03.5
0054:  BSF    05.3
....................                output_low(IN2); 
0055:  BSF    03.5
0056:  BCF    05.1
0057:  BCF    03.5
0058:  BCF    05.1
....................                output_low(IN3); 
0059:  BSF    03.5
005A:  BCF    05.2
005B:  BCF    03.5
005C:  BCF    05.2
....................                 
....................                output_high(IN5); 
005D:  BSF    03.5
005E:  BCF    06.0
005F:  BCF    03.5
0060:  BSF    06.0
....................                output_high(IN8); 
0061:  BSF    03.5
0062:  BCF    06.3
0063:  BCF    03.5
0064:  BSF    06.3
....................                output_low(IN6); 
0065:  BSF    03.5
0066:  BCF    06.1
0067:  BCF    03.5
0068:  BCF    06.1
....................                output_low(IN7); 
0069:  BSF    03.5
006A:  BCF    06.2
006B:  BCF    03.5
006C:  BCF    06.2
....................                break; 
006D:  GOTO   0D2
....................                 
....................             case 's': 
....................                output_high(IN2); 
006E:  BSF    03.5
006F:  BCF    05.1
0070:  BCF    03.5
0071:  BSF    05.1
....................                output_low(IN4); 
0072:  BSF    03.5
0073:  BCF    05.3
0074:  BCF    03.5
0075:  BCF    05.3
....................                output_high(IN3); 
0076:  BSF    03.5
0077:  BCF    05.2
0078:  BCF    03.5
0079:  BSF    05.2
....................                output_low(IN1); 
007A:  BSF    03.5
007B:  BCF    05.0
007C:  BCF    03.5
007D:  BCF    05.0
....................                 
....................                output_high(IN6); 
007E:  BSF    03.5
007F:  BCF    06.1
0080:  BCF    03.5
0081:  BSF    06.1
....................                output_low(IN8); 
0082:  BSF    03.5
0083:  BCF    06.3
0084:  BCF    03.5
0085:  BCF    06.3
....................                output_high(IN7); 
0086:  BSF    03.5
0087:  BCF    06.2
0088:  BCF    03.5
0089:  BSF    06.2
....................                output_low(IN5); 
008A:  BSF    03.5
008B:  BCF    06.0
008C:  BCF    03.5
008D:  BCF    06.0
....................                break; 
008E:  GOTO   0D2
....................                 
....................             case 'a': 
....................                output_low(IN7); 
008F:  BSF    03.5
0090:  BCF    06.2
0091:  BCF    03.5
0092:  BCF    06.2
....................                output_low(IN3); 
0093:  BSF    03.5
0094:  BCF    05.2
0095:  BCF    03.5
0096:  BCF    05.2
....................                output_high(IN8); 
0097:  BSF    03.5
0098:  BCF    06.3
0099:  BCF    03.5
009A:  BSF    06.3
....................                output_high(IN4); 
009B:  BSF    03.5
009C:  BCF    05.3
009D:  BCF    03.5
009E:  BSF    05.3
....................                 
....................                output_low(IN1); 
009F:  BSF    03.5
00A0:  BCF    05.0
00A1:  BCF    03.5
00A2:  BCF    05.0
....................                output_low(IN5); 
00A3:  BSF    03.5
00A4:  BCF    06.0
00A5:  BCF    03.5
00A6:  BCF    06.0
....................                output_high(IN2); 
00A7:  BSF    03.5
00A8:  BCF    05.1
00A9:  BCF    03.5
00AA:  BSF    05.1
....................                output_high(IN6); 
00AB:  BSF    03.5
00AC:  BCF    06.1
00AD:  BCF    03.5
00AE:  BSF    06.1
....................                break; 
00AF:  GOTO   0D2
....................                 
....................             case 'd': 
....................                output_high(IN7); 
00B0:  BSF    03.5
00B1:  BCF    06.2
00B2:  BCF    03.5
00B3:  BSF    06.2
....................                output_high(IN3); 
00B4:  BSF    03.5
00B5:  BCF    05.2
00B6:  BCF    03.5
00B7:  BSF    05.2
....................                output_low(IN8); 
00B8:  BSF    03.5
00B9:  BCF    06.3
00BA:  BCF    03.5
00BB:  BCF    06.3
....................                output_low(IN4); 
00BC:  BSF    03.5
00BD:  BCF    05.3
00BE:  BCF    03.5
00BF:  BCF    05.3
....................                 
....................                output_high(IN1); 
00C0:  BSF    03.5
00C1:  BCF    05.0
00C2:  BCF    03.5
00C3:  BSF    05.0
....................                output_high(IN5); 
00C4:  BSF    03.5
00C5:  BCF    06.0
00C6:  BCF    03.5
00C7:  BSF    06.0
....................                output_low(IN2); 
00C8:  BSF    03.5
00C9:  BCF    05.1
00CA:  BCF    03.5
00CB:  BCF    05.1
....................                output_low(IN6); 
00CC:  BSF    03.5
00CD:  BCF    06.1
00CE:  BCF    03.5
00CF:  BCF    06.1
....................                break; 
00D0:  GOTO   0D2
....................                 
....................             default: 
....................                stop_motors(); 
00D1:  CALL   004
....................                break; 
....................          } 
....................       } else { 
00D2:  GOTO   0D4
....................          stop_motors(); 
00D3:  CALL   004
....................       } 
00D4:  GOTO   039
....................    } 
.................... } 
....................  
00D5:  SLEEP
....................  
....................                 
....................        
....................     
....................       
....................             
....................  
....................      
....................      
....................      
....................  

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
