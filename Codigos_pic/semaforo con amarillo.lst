CCS PCM C Compiler, Version 5.015, 5967               13-jul.-24 17:01

               Filename:   C:\Users\Joss\Documents\Codigos pic\semaforo con amarillo.lst

               ROM used:   266 words (3%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           7 (2%) worst case
               Stack used: 1 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses NOWDT, XT 
.................... #use delay(clock=4M) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
....................  
.................... void main() { 
0019:  MOVF   03,W
001A:  ANDLW  1F
001B:  MOVWF  03
001C:  BSF    03.5
001D:  BSF    1F.0
001E:  BSF    1F.1
001F:  BSF    1F.2
0020:  BCF    1F.3
0021:  MOVLW  07
0022:  MOVWF  1C
0023:  BCF    03.7
....................     while (TRUE) { 
....................         // Secuencia 1 
....................         output_high(PIN_A0); //Rojo 
0024:  BCF    05.0
0025:  BCF    03.5
0026:  BSF    05.0
....................         output_high(PIN_D0); //Rojo 
0027:  BSF    03.5
0028:  BCF    08.0
0029:  BCF    03.5
002A:  BSF    08.0
....................         output_high(PIN_E1); //Verde 
002B:  BSF    03.5
002C:  BCF    09.1
002D:  BCF    03.5
002E:  BSF    09.1
....................         delay_ms(500);  
002F:  MOVLW  02
0030:  MOVWF  21
0031:  MOVLW  FA
0032:  MOVWF  22
0033:  CALL   004
0034:  DECFSZ 21,F
0035:  GOTO   031
....................  
....................         output_low(PIN_A0); 
0036:  BSF    03.5
0037:  BCF    05.0
0038:  BCF    03.5
0039:  BCF    05.0
....................         output_low(PIN_D0); 
003A:  BSF    03.5
003B:  BCF    08.0
003C:  BCF    03.5
003D:  BCF    08.0
....................         output_low(PIN_E1); // Verde 
003E:  BSF    03.5
003F:  BCF    09.1
0040:  BCF    03.5
0041:  BCF    09.1
....................         delay_ms(500);  
0042:  MOVLW  02
0043:  MOVWF  21
0044:  MOVLW  FA
0045:  MOVWF  22
0046:  CALL   004
0047:  DECFSZ 21,F
0048:  GOTO   044
....................          
....................         output_high(PIN_A0); //Rojo 
0049:  BSF    03.5
004A:  BCF    05.0
004B:  BCF    03.5
004C:  BSF    05.0
....................         output_high(PIN_D0); //Rojo 
004D:  BSF    03.5
004E:  BCF    08.0
004F:  BCF    03.5
0050:  BSF    08.0
....................         output_high(PIN_E0);  
0051:  BSF    03.5
0052:  BCF    09.0
0053:  BCF    03.5
0054:  BSF    09.0
....................         delay_ms(500);  
0055:  MOVLW  02
0056:  MOVWF  21
0057:  MOVLW  FA
0058:  MOVWF  22
0059:  CALL   004
005A:  DECFSZ 21,F
005B:  GOTO   057
....................  
....................         output_low(PIN_A0); 
005C:  BSF    03.5
005D:  BCF    05.0
005E:  BCF    03.5
005F:  BCF    05.0
....................         output_low(PIN_D0); 
0060:  BSF    03.5
0061:  BCF    08.0
0062:  BCF    03.5
0063:  BCF    08.0
....................         output_low(PIN_E0); // Amarillo 
0064:  BSF    03.5
0065:  BCF    09.0
0066:  BCF    03.5
0067:  BCF    09.0
....................         delay_ms(500);  
0068:  MOVLW  02
0069:  MOVWF  21
006A:  MOVLW  FA
006B:  MOVWF  22
006C:  CALL   004
006D:  DECFSZ 21,F
006E:  GOTO   06A
....................          
....................         // Secuencia 2 
....................  
....................         output_high(PIN_A5); //Rojo 
006F:  BSF    03.5
0070:  BCF    05.5
0071:  BCF    03.5
0072:  BSF    05.5
....................         output_high(PIN_D0); //Rojo 
0073:  BSF    03.5
0074:  BCF    08.0
0075:  BCF    03.5
0076:  BSF    08.0
....................         output_high(PIN_A2); //Verde 
0077:  BSF    03.5
0078:  BCF    05.2
0079:  BCF    03.5
007A:  BSF    05.2
....................         delay_ms(500);  
007B:  MOVLW  02
007C:  MOVWF  21
007D:  MOVLW  FA
007E:  MOVWF  22
007F:  CALL   004
0080:  DECFSZ 21,F
0081:  GOTO   07D
....................  
....................         output_low(PIN_A5); //Rojo 
0082:  BSF    03.5
0083:  BCF    05.5
0084:  BCF    03.5
0085:  BCF    05.5
....................         output_low(PIN_D0); //Rojo 
0086:  BSF    03.5
0087:  BCF    08.0
0088:  BCF    03.5
0089:  BCF    08.0
....................         output_low(PIN_A2); // Verde 
008A:  BSF    03.5
008B:  BCF    05.2
008C:  BCF    03.5
008D:  BCF    05.2
....................         delay_ms(500);  
008E:  MOVLW  02
008F:  MOVWF  21
0090:  MOVLW  FA
0091:  MOVWF  22
0092:  CALL   004
0093:  DECFSZ 21,F
0094:  GOTO   090
....................  
....................         output_high(PIN_A5); //Rojo 
0095:  BSF    03.5
0096:  BCF    05.5
0097:  BCF    03.5
0098:  BSF    05.5
....................         output_high(PIN_D0); //Rojo 
0099:  BSF    03.5
009A:  BCF    08.0
009B:  BCF    03.5
009C:  BSF    08.0
....................         output_high(PIN_A1); //Amarillo 
009D:  BSF    03.5
009E:  BCF    05.1
009F:  BCF    03.5
00A0:  BSF    05.1
....................         delay_ms(500);  
00A1:  MOVLW  02
00A2:  MOVWF  21
00A3:  MOVLW  FA
00A4:  MOVWF  22
00A5:  CALL   004
00A6:  DECFSZ 21,F
00A7:  GOTO   0A3
....................  
....................         output_low(PIN_A5); //Rojo 
00A8:  BSF    03.5
00A9:  BCF    05.5
00AA:  BCF    03.5
00AB:  BCF    05.5
....................         output_low(PIN_D0); //Rojo 
00AC:  BSF    03.5
00AD:  BCF    08.0
00AE:  BCF    03.5
00AF:  BCF    08.0
....................         output_low(PIN_A1); //Amarillo 
00B0:  BSF    03.5
00B1:  BCF    05.1
00B2:  BCF    03.5
00B3:  BCF    05.1
....................         delay_ms(500);  
00B4:  MOVLW  02
00B5:  MOVWF  21
00B6:  MOVLW  FA
00B7:  MOVWF  22
00B8:  CALL   004
00B9:  DECFSZ 21,F
00BA:  GOTO   0B6
....................  
....................         // Secuencia 3 
....................         output_high(PIN_A0); //Rojo 
00BB:  BSF    03.5
00BC:  BCF    05.0
00BD:  BCF    03.5
00BE:  BSF    05.0
....................         output_high(PIN_A5); //Rojo 
00BF:  BSF    03.5
00C0:  BCF    05.5
00C1:  BCF    03.5
00C2:  BSF    05.5
....................         output_high(PIN_D4); //Verde 
00C3:  BSF    03.5
00C4:  BCF    08.4
00C5:  BCF    03.5
00C6:  BSF    08.4
....................         delay_ms(500);  
00C7:  MOVLW  02
00C8:  MOVWF  21
00C9:  MOVLW  FA
00CA:  MOVWF  22
00CB:  CALL   004
00CC:  DECFSZ 21,F
00CD:  GOTO   0C9
....................  
....................         output_low(PIN_A0); //Rojo 
00CE:  BSF    03.5
00CF:  BCF    05.0
00D0:  BCF    03.5
00D1:  BCF    05.0
....................         output_low(PIN_A5); //Rojo 
00D2:  BSF    03.5
00D3:  BCF    05.5
00D4:  BCF    03.5
00D5:  BCF    05.5
....................         output_low(PIN_D4); // Verde 
00D6:  BSF    03.5
00D7:  BCF    08.4
00D8:  BCF    03.5
00D9:  BCF    08.4
....................         delay_ms(500);  
00DA:  MOVLW  02
00DB:  MOVWF  21
00DC:  MOVLW  FA
00DD:  MOVWF  22
00DE:  CALL   004
00DF:  DECFSZ 21,F
00E0:  GOTO   0DC
....................          
....................         output_high(PIN_A0); //Rojo 
00E1:  BSF    03.5
00E2:  BCF    05.0
00E3:  BCF    03.5
00E4:  BSF    05.0
....................         output_high(PIN_A5); //Rojo 
00E5:  BSF    03.5
00E6:  BCF    05.5
00E7:  BCF    03.5
00E8:  BSF    05.5
....................         output_high(PIN_D2); //Amarillo 
00E9:  BSF    03.5
00EA:  BCF    08.2
00EB:  BCF    03.5
00EC:  BSF    08.2
....................         delay_ms(500);  
00ED:  MOVLW  02
00EE:  MOVWF  21
00EF:  MOVLW  FA
00F0:  MOVWF  22
00F1:  CALL   004
00F2:  DECFSZ 21,F
00F3:  GOTO   0EF
....................  
....................         output_low(PIN_A0); //Rojo 
00F4:  BSF    03.5
00F5:  BCF    05.0
00F6:  BCF    03.5
00F7:  BCF    05.0
....................         output_low(PIN_A5); //Rojo 
00F8:  BSF    03.5
00F9:  BCF    05.5
00FA:  BCF    03.5
00FB:  BCF    05.5
....................         output_low(PIN_D2); //Amarillo 
00FC:  BSF    03.5
00FD:  BCF    08.2
00FE:  BCF    03.5
00FF:  BCF    08.2
....................         delay_ms(500);  
0100:  MOVLW  02
0101:  MOVWF  21
0102:  MOVLW  FA
0103:  MOVWF  22
0104:  CALL   004
0105:  DECFSZ 21,F
0106:  GOTO   102
0107:  BSF    03.5
0108:  GOTO   024
....................  
....................     } 
.................... } 
....................  
0109:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
