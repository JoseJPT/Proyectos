CCS PCM C Compiler, Version 5.015, 5967               15-ene.-25 11:47

               Filename:   C:\Users\Joss\Desktop\Meca\Programacion\Codigos pic\carron.lst

               ROM used:   132 words (2%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           6 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   004
0003:  NOP
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses XT, NOWDT, NOPROTECT, NOLVP 
.................... #use delay(clock=4M) // Configuración de 20 MHz 
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7, bits=8) 
....................  
.................... // Definición de pines de control 
.................... #define IN1 PIN_A0 
.................... #define IN2 PIN_A1 
.................... #define IN3 PIN_A2 
.................... #define IN4 PIN_A3 
....................  
.................... void main() { 
0004:  MOVF   03,W
0005:  ANDLW  1F
0006:  MOVWF  03
0007:  MOVLW  19
0008:  BSF    03.5
0009:  MOVWF  19
000A:  MOVLW  A6
000B:  MOVWF  18
000C:  MOVLW  90
000D:  BCF    03.5
000E:  MOVWF  18
000F:  BSF    03.5
0010:  BSF    1F.0
0011:  BSF    1F.1
0012:  BSF    1F.2
0013:  BCF    1F.3
0014:  MOVLW  07
0015:  MOVWF  1C
0016:  BCF    03.7
....................     char data; 
....................  
....................     while(TRUE) { 
....................         if(kbhit()) { // Verifica si hay un carácter recibido 
0017:  BCF    03.5
0018:  BTFSS  0C.5
0019:  GOTO   082
....................             data = getc(); // Lee el carácter recibido 
001A:  BTFSS  0C.5
001B:  GOTO   01A
001C:  MOVF   1A,W
001D:  MOVWF  21
....................  
....................             // ADELANTE 
....................             if(data == 'w') { 
001E:  MOVF   21,W
001F:  SUBLW  77
0020:  BTFSS  03.2
0021:  GOTO   033
....................                 output_high(IN1);  // Enciende A0 
0022:  BSF    03.5
0023:  BCF    05.0
0024:  BCF    03.5
0025:  BSF    05.0
....................                 output_low(IN2);   // Apaga A1 
0026:  BSF    03.5
0027:  BCF    05.1
0028:  BCF    03.5
0029:  BCF    05.1
....................                 output_high(IN3);  // Enciende A2 
002A:  BSF    03.5
002B:  BCF    05.2
002C:  BCF    03.5
002D:  BSF    05.2
....................                 output_low(IN4);   // Apaga A3 
002E:  BSF    03.5
002F:  BCF    05.3
0030:  BCF    03.5
0031:  BCF    05.3
....................             } 
0032:  GOTO   082
....................             // ATRÁS 
....................             else if(data == 's') { 
0033:  MOVF   21,W
0034:  SUBLW  73
0035:  BTFSS  03.2
0036:  GOTO   048
....................                 output_low(IN1);   // Apaga A0 
0037:  BSF    03.5
0038:  BCF    05.0
0039:  BCF    03.5
003A:  BCF    05.0
....................                 output_high(IN2);  // Enciende A1 
003B:  BSF    03.5
003C:  BCF    05.1
003D:  BCF    03.5
003E:  BSF    05.1
....................                 output_low(IN3);   // Apaga A2 
003F:  BSF    03.5
0040:  BCF    05.2
0041:  BCF    03.5
0042:  BCF    05.2
....................                 output_high(IN4);  // Enciende A3 
0043:  BSF    03.5
0044:  BCF    05.3
0045:  BCF    03.5
0046:  BSF    05.3
....................             } 
0047:  GOTO   082
....................             // DERECHA 
....................             else if(data == 'd') { 
0048:  MOVF   21,W
0049:  SUBLW  64
004A:  BTFSS  03.2
004B:  GOTO   05D
....................                 output_low(IN1);   // Apaga A0 
004C:  BSF    03.5
004D:  BCF    05.0
004E:  BCF    03.5
004F:  BCF    05.0
....................                 output_high(IN2);  // Enciende A1 
0050:  BSF    03.5
0051:  BCF    05.1
0052:  BCF    03.5
0053:  BSF    05.1
....................                 output_high(IN3);  // Enciende A2 
0054:  BSF    03.5
0055:  BCF    05.2
0056:  BCF    03.5
0057:  BSF    05.2
....................                 output_low(IN4);   // Apaga A3 
0058:  BSF    03.5
0059:  BCF    05.3
005A:  BCF    03.5
005B:  BCF    05.3
....................             } 
005C:  GOTO   082
....................             // IZQUIERDA 
....................             else if(data == 'a') { 
005D:  MOVF   21,W
005E:  SUBLW  61
005F:  BTFSS  03.2
0060:  GOTO   072
....................                 output_high(IN1);  // Enciende A0 
0061:  BSF    03.5
0062:  BCF    05.0
0063:  BCF    03.5
0064:  BSF    05.0
....................                 output_low(IN2);   // Apaga A1 
0065:  BSF    03.5
0066:  BCF    05.1
0067:  BCF    03.5
0068:  BCF    05.1
....................                 output_low(IN3);   // Apaga A2 
0069:  BSF    03.5
006A:  BCF    05.2
006B:  BCF    03.5
006C:  BCF    05.2
....................                 output_high(IN4);  // Enciende A3 
006D:  BSF    03.5
006E:  BCF    05.3
006F:  BCF    03.5
0070:  BSF    05.3
....................             } 
0071:  GOTO   082
....................             // Apagar todos los LEDs si se recibe otro carácter 
....................             else { 
....................                 output_low(IN1); 
0072:  BSF    03.5
0073:  BCF    05.0
0074:  BCF    03.5
0075:  BCF    05.0
....................                 output_low(IN2); 
0076:  BSF    03.5
0077:  BCF    05.1
0078:  BCF    03.5
0079:  BCF    05.1
....................                 output_low(IN3); 
007A:  BSF    03.5
007B:  BCF    05.2
007C:  BCF    03.5
007D:  BCF    05.2
....................                 output_low(IN4); 
007E:  BSF    03.5
007F:  BCF    05.3
0080:  BCF    03.5
0081:  BCF    05.3
....................             } 
....................         } 
0082:  GOTO   018
....................     } 
.................... } 
0083:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
